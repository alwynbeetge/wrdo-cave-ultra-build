"use strict";(()=>{var e={};e.id=8873,e.ids=[8873],e.modules={53524:e=>{e.exports=require("@prisma/client")},72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},20399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},84770:e=>{e.exports=require("crypto")},17702:e=>{e.exports=require("events")},19819:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>A,patchFetch:()=>b,requestAsyncStorage:()=>f,routeModule:()=>w,serverHooks:()=>z,staticGenerationAsyncStorage:()=>v});var s={};r.r(s),r.d(s,{DELETE:()=>y,GET:()=>g,PATCH:()=>h,POST:()=>p,PUT:()=>x,dynamic:()=>m});var a=r(49303),n=r(88716),i=r(60670),o=r(87070),u=r(90455),l=r(60556),d=r(35860),c=r(96773);let m="force-dynamic";async function p(e){let t=Date.now(),r=(0,c.XQ)(e);try{let s=await (0,d.Iy)(e,d.Qd);if(!s.allowed)return await c.rO.logSecurityEvent({type:"rate_limit_exceeded",severity:"medium",ip:r.ip,userAgent:r.userAgent,description:`Login rate limit exceeded for IP ${r.ip}`,metadata:{endpoint:"/api/auth/login",retryAfter:s.retryAfter}}),o.NextResponse.json({error:"Too many login attempts. Please try again later.",retryAfter:s.retryAfter},{status:429,headers:s.headers});let a=await e.json(),n=(0,l.b0)(l.dm,a);if(!n.success)return await c.rO.logActivity({ip:r.ip,userAgent:r.userAgent,action:"login_attempt",resource:"auth",success:!1,errorMessage:n.error,responseTime:Date.now()-t}),o.NextResponse.json({error:n.error},{status:400,headers:s.headers});let{email:i,password:m}=n.data,p=(0,l.H3)(i);await c.rO.logActivity({ip:r.ip,userAgent:r.userAgent,action:"login_attempt",resource:"auth",details:{email:p,timestamp:new Date().toISOString()}});let g={id:"mock-user-1",email:p,name:"Admin User",image:null,createdAt:new Date,updatedAt:new Date};if(!p||!m){await c.rO.logSecurityEvent({type:"failed_auth",severity:"medium",ip:r.ip,userAgent:r.userAgent,description:`Failed login attempt for email: ${p}`,metadata:{email:p,timestamp:new Date().toISOString()}}),await c.rO.logActivity({ip:r.ip,userAgent:r.userAgent,action:"login_failed",resource:"auth",details:{email:p},success:!1,errorMessage:"Invalid credentials",responseTime:Date.now()-t});let e=await c.rO.analyzeIpActivity(r.ip,60);return e.riskScore>=8&&(d.BI.blockIp(r.ip,"Excessive failed login attempts",36e5),await c.rO.logSecurityEvent({type:"blocked_ip",severity:"high",ip:r.ip,userAgent:r.userAgent,description:`IP blocked due to excessive failed login attempts (risk score: ${e.riskScore})`,metadata:{riskScore:e.riskScore,totalRequests:e.totalRequests,failedRequests:e.failedRequests,blockDuration:"1 hour"}})),o.NextResponse.json({error:"Invalid email or password"},{status:401,headers:s.headers})}let x=await (0,u.ed)(g);return await c.rO.logActivity({ip:r.ip,userAgent:r.userAgent,userId:g.id,action:"login_success",resource:"auth",details:{email:p,sessionToken:x.substring(0,8)+"..."},success:!0,responseTime:Date.now()-t}),o.NextResponse.json({success:!0,user:{id:g.id,email:g.email,name:g.name,image:g.image}},{status:200,headers:s.headers})}catch(e){return console.error("Login error:",e),await c.rO.logActivity({ip:r.ip,userAgent:r.userAgent,action:"login_error",resource:"auth",success:!1,errorMessage:e instanceof Error?e.message:"Unknown error",responseTime:Date.now()-t}),await c.rO.logSecurityEvent({type:"suspicious_activity",severity:"high",ip:r.ip,userAgent:r.userAgent,description:"Internal server error during login attempt",metadata:{error:e instanceof Error?e.message:"Unknown error",endpoint:"/api/auth/login"}}),o.NextResponse.json({error:"Internal server error"},{status:500})}}async function g(e){return o.NextResponse.json({error:"Method not allowed"},{status:405})}async function x(e){return o.NextResponse.json({error:"Method not allowed"},{status:405})}async function y(e){return o.NextResponse.json({error:"Method not allowed"},{status:405})}async function h(e){return o.NextResponse.json({error:"Method not allowed"},{status:405})}let w=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/auth/login/route",pathname:"/api/auth/login",filename:"route",bundlePath:"app/api/auth/login/route"},resolvedPagePath:"/home/ubuntu/wrdo-cave-ultra-build/app/api/auth/login/route.ts",nextConfigOutput:"standalone",userland:s}),{requestAsyncStorage:f,staticGenerationAsyncStorage:v,serverHooks:z}=w,A="/api/auth/login/route";function b(){return(0,i.patchFetch)({serverHooks:z,staticGenerationAsyncStorage:v})}},60556:(e,t,r)=>{r.d(t,{H3:()=>o,b0:()=>i,dm:()=>a,jg:()=>n});var s=r(9133);let a=s.z.object({email:s.z.string().email("Invalid email address").min(1,"Email is required").max(255,"Email too long"),password:s.z.string().min(8,"Password must be at least 8 characters").max(128,"Password too long")});s.z.object({name:s.z.string().min(1,"Name is required").max(100,"Name too long").regex(/^[a-zA-Z\s]+$/,"Name can only contain letters and spaces"),email:s.z.string().email("Invalid email address").min(1,"Email is required").max(255,"Email too long"),password:s.z.string().min(8,"Password must be at least 8 characters").max(128,"Password too long").regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/,"Password must contain at least one lowercase letter, one uppercase letter, and one number")});let n=s.z.object({message:s.z.string().min(1,"Message cannot be empty").max(8e3,"Message too long"),model:s.z.string().min(1,"Model selection is required").max(50,"Model name too long"),conversationId:s.z.string().uuid("Invalid conversation ID").optional(),temperature:s.z.number().min(0).max(2).optional().default(.7),maxTokens:s.z.number().min(1).max(4e3).optional().default(1e3)});function i(e,t){try{let r=e.parse(t);return{success:!0,data:r}}catch(e){if(e instanceof s.z.ZodError)return{success:!1,error:e.errors[0].message};return{success:!1,error:"Validation failed"}}}function o(e){return e.toLowerCase().trim()}s.z.object({filename:s.z.string().min(1,"Filename is required").max(255,"Filename too long").regex(/^[^<>:"/\\|?*]+$/,"Invalid filename characters"),fileType:s.z.enum(["pdf","docx","txt","csv","xlsx"]).describe("Supported file types"),fileSize:s.z.number().min(1,"File cannot be empty").max(10485760,"File size cannot exceed 10MB")}),s.z.object({action:s.z.enum(["ban_user","unban_user","delete_user","change_role"]),targetUserId:s.z.string().uuid("Invalid user ID"),reason:s.z.string().min(1,"Reason is required").max(500,"Reason too long"),newRole:s.z.enum(["admin","user"]).optional()}),s.z.object({ip:s.z.string().ip("Invalid IP address"),userAgent:s.z.string().max(1e3,"User agent too long"),action:s.z.string().min(1,"Action is required").max(100,"Action too long"),resource:s.z.string().min(1,"Resource is required").max(100,"Resource too long"),details:s.z.record(s.z.any()).optional()}),s.z.object({windowMs:s.z.number().min(1e3).max(36e5),maxRequests:s.z.number().min(1).max(1e4),skipSuccessfulRequests:s.z.boolean().optional().default(!1),skipFailedRequests:s.z.boolean().optional().default(!1)}),s.z.string().uuid("Invalid UUID format"),s.z.string().email("Invalid email address"),s.z.string().min(8,"Password must be at least 8 characters")}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[9276,5972,5795,9457,9133,764],()=>r(19819));module.exports=s})();